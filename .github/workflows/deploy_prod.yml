name: Deploy sendme frontend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOMAIN: new.sendme123.com
      EMAIL: admin@sendme123.com
      FRONTEND_PATH: /var/www/vhosts/new.sendme123.com
      SERVER_HOST: ${{ secrets.IP }}
      SERVER_USER: ${{ secrets.USER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-optional
          fi

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Test
        run: npm test
        continue-on-error: true

      - name: Upload dist
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: 'dist/*'
          strip_components: 1
          target: '${{ env.FRONTEND_PATH }}/'

      - name: Upload Nginx configs
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: 'infra/nginx/*'
          target: '/etc/nginx/sites-available/'

      - name: Configure Nginx and SSL
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -euo pipefail
            DOMAIN="${DOMAIN}"
            EMAIL="${EMAIL}"
            WEBROOT="${FRONTEND_PATH}"
            SITE_BASENAME="sendme123"
            HTTP_CONF="/etc/nginx/sites-available/${SITE_BASENAME}.http.conf"
            HTTPS_CONF="/etc/nginx/sites-available/${SITE_BASENAME}.https.conf"

            # Paquetes
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y nginx certbot python3-certbot-nginx

            # Directorios
            mkdir -p "$WEBROOT" /var/www/html
            chown -R www-data:www-data "$WEBROOT"
            chmod -R 755 "$WEBROOT"

            # Fase 1: habilitar HTTP para challenge
            ln -sf "$HTTP_CONF" "/etc/nginx/sites-enabled/${SITE_BASENAME}"
            rm -f /etc/nginx/sites-enabled/default
            nginx -t
            systemctl reload nginx

            # Emitir certificado si no existe
            if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
              certbot certonly --webroot -w /var/www/html -d "${DOMAIN}" --non-interactive --agree-tos -m "${EMAIL}"
            fi

            # Fase 2: habilitar HTTPS definitivo
            ln -sf "$HTTPS_CONF" "/etc/nginx/sites-enabled/${SITE_BASENAME}"
            nginx -t
            systemctl reload nginx

            # Renovación automática
            if ! crontab -l 2>/dev/null | grep -q 'certbot renew'; then
              (crontab -l 2>/dev/null; echo '0 3 * * * certbot renew --quiet --post-hook "systemctl reload nginx"') | crontab -
            fi
