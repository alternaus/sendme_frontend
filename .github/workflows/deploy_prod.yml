name: Deploy sendme frontend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOMAIN: new.sendme123.com
      EMAIL: admin@sendme123.com
      FRONTEND_PATH: /var/www/vhosts/new.sendme123.com
      SITE_BASENAME: sendme123
      SERVER_HOST: ${{ secrets.IP }}
      SERVER_USER: ${{ secrets.USER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Stamp build version
        run: |
          echo "${GITHUB_SHA::7} $(date -u +%FT%TZ)" > dist/version.txt

      - name: Package dist
        run: tar -C dist -czf dist.tgz .

      - name: Upload dist.tgz to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          source: 'dist.tgz'
          target: '/tmp/'

      - name: Configure Nginx, SSL and release
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            DOMAIN="${{ env.DOMAIN }}"
            EMAIL="${{ env.EMAIL }}"
            BASE="${{ env.FRONTEND_PATH }}"
            TS=$(date +%Y%m%d%H%M%S)

            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y nginx certbot python3-certbot-nginx curl

            # Estructura + placeholder si no hay index
            mkdir -p "$BASE/releases" "$BASE/shared" /var/www/html /etc/nginx/sites-available /etc/nginx/sites-enabled
            if [ ! -f "$BASE/current/index.html" ]; then
              mkdir -p "$BASE/releases/placeholder"
              echo "<!doctype html><h1>Deploy en curso</h1>" > "$BASE/releases/placeholder/index.html"
              ln -sfn "$BASE/releases/placeholder" "$BASE/current"
            fi
            chown -R www-data:www-data "$BASE"; chmod 755 /var /var/www /var/www/vhosts "$BASE" "$BASE/releases" "$BASE/current"

            # CONF LIMPIO: sin error_page ni rewrites a /index.html
            rm -f /etc/nginx/sites-enabled/*
            cat >/etc/nginx/sites-available/sendme123.http.conf <<'HTTP'
            server {
              listen 80;
              server_name new.sendme123.com;

              root /var/www/vhosts/new.sendme123.com/current;
              index index.html;

              location ^~ /.well-known/acme-challenge/ {
                root /var/www/html;
                default_type "text/plain";
              }

              location / {
                try_files $uri $uri/ /index.html;
              }

              return 301 https://$host$request_uri;
            }
            HTTP

            cat >/etc/nginx/sites-available/sendme123.https.conf <<'HTTPS'
            server {
              listen 443 ssl http2;
              server_name new.sendme123.com;

              ssl_certificate /etc/letsencrypt/live/new.sendme123.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/new.sendme123.com/privkey.pem;

              root /var/www/vhosts/new.sendme123.com/current;
              index index.html;

              # SPA fallback, sin bucles
              location / {
                try_files $uri $uri/ /index.html;
              }

              # Evita re-try_files aquí
              location = /index.html {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
              }
            }
            HTTPS

            ln -sfn /etc/nginx/sites-available/sendme123.http.conf  /etc/nginx/sites-enabled/sendme123.conf
            nginx -t && systemctl reload nginx

            if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
              certbot certonly --webroot -w /var/www/html -d "${DOMAIN}" -m "${EMAIL}" --agree-tos --non-interactive
            fi

            ln -sfn /etc/nginx/sites-available/sendme123.https.conf /etc/nginx/sites-enabled/sendme123.conf
            nginx -t && systemctl reload nginx

            # Deploy atómico
            PREV=""
            [ -L "$BASE/current" ] && PREV="$(readlink -f "$BASE/current" || true)"
            [ -e "$BASE/current" ] && [ ! -L "$BASE/current" ] && rm -rf "$BASE/current"

            mkdir -p "$BASE/releases/${TS}"
            tar -C "$BASE/releases/${TS}" -xzf /tmp/dist.tgz
            ln -sfn "$BASE/releases/${TS}" "$BASE/current"
            chown -R www-data:www-data "$BASE"
            rm -f /tmp/dist.tgz

            # Sanidad: debe existir index.html
            test -f "$BASE/current/index.html" || { echo "Falta index.html en release"; exit 1; }

            # Limpieza
            if [ -n "$PREV" ] && [ -d "$PREV" ] && [ "$PREV" != "$BASE/releases/${TS}" ]; then rm -rf "$PREV"; fi
            rm -rf /var/cache/nginx/* || true
            find "$BASE/releases" -maxdepth 1 -mindepth 1 -type d -printf "%T@ %p\n" | sort -rn | awk 'NR>5{print $2}' | xargs -r rm -rf

            # Renew diario
            if ! crontab -l 2>/dev/null | grep -q 'certbot renew'; then
              (crontab -l 2>/dev/null; echo '0 3 * * * certbot renew --quiet --post-hook "systemctl reload nginx"') | crontab -
            fi

            # Debug mínimo
            echo "ROOT -> $(readlink -f $BASE/current)"; ls -la "$BASE/current" | head
            nginx -t && systemctl reload nginx
            curl -skI "https://${DOMAIN}/" | head -n1
            curl -skI "https://${DOMAIN}/index.html" | head -n1
            curl -skI "https://${DOMAIN}/auth/sign-in" | head -n1
