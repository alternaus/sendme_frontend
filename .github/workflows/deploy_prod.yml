name: Deploy sendme frontend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOMAIN: new.sendme123.com
      EMAIL: admin@sendme123.com
      FRONTEND_PATH: /var/www/vhosts/new.sendme123.com
      SITE_BASENAME: sendme123
      SERVER_HOST: ${{ secrets.IP }}
      SERVER_USER: ${{ secrets.USER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Package dist
        run: tar -C dist -czf dist.tgz .

      - name: Upload dist.tgz to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          source: 'dist.tgz'
          target: '/tmp/'

      - name: Upload Nginx configs to server (/tmp/nginx)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          source: 'infra/nginx/*'
          target: '/tmp/nginx/'

      - name: Configure Nginx, SSL and release
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            DOMAIN="${{ env.DOMAIN }}"
            EMAIL="${{ env.EMAIL }}"
            BASE="${{ env.FRONTEND_PATH }}"
            SITE="${{ env.SITE_BASENAME }}"
            TS=$(date +%Y%m%d%H%M%S)
        
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y nginx certbot python3-certbot-nginx
        
            mkdir -p "$BASE/releases" "$BASE/shared" /var/www/html
            chown -R www-data:www-data "$BASE"
            chmod -R 755 "$BASE"
        
            # Habilitar HTTP para ACME
            ln -sfn /etc/nginx/sites-available/${SITE}.http.conf /etc/nginx/sites-enabled/${SITE}
            rm -f /etc/nginx/sites-enabled/default
            nginx -t
            systemctl reload nginx
        
            # Emitir cert si no existe
            if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
              certbot certonly --webroot -w /var/www/html -d "${DOMAIN}" --non-interactive --agree-tos -m "${EMAIL}"
            fi
        
            # Habilitar HTTPS definitivo
            ln -sfn /etc/nginx/sites-available/${SITE}.https.conf /etc/nginx/sites-enabled/${SITE}
            nginx -t
            systemctl reload nginx
        
            # Despliegue atómico
            mkdir -p "$BASE/releases/${TS}"
            tar -C "$BASE/releases/${TS}" -xzf /tmp/dist.tgz
            ln -sfn "$BASE/releases/${TS}" "$BASE/current"
            chown -R www-data:www-data "$BASE"
            rm -f /tmp/dist.tgz
        
            # Retención
            find "$BASE/releases" -maxdepth 1 -mindepth 1 -type d -printf "%T@ %p\n" | sort -rn | awk 'NR>5{print $2}' | xargs -r rm -rf
        
            # Renovación
            if ! crontab -l 2>/dev/null | grep -q 'certbot renew'; then
              (crontab -l 2>/dev/null; echo '0 3 * * * certbot renew --quiet --post-hook "systemctl reload nginx"') | crontab -
            fi